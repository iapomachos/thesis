import org.apache.spark.mllib.classification.{SVMModel, SVMWithSGD}
import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics
import org.apache.spark.mllib.util.MLUtils

val start = System.currentTimeMillis

// Load training data in LIBSVM format.
val data = MLUtils.loadLibSVMFile(sc, "SUSYCo100k")

// Split data into training (60%) and test (40%).
val splits = data.randomSplit(Array(0.6, 0.4), seed = 11L)
val training = splits(0).cache()
val test = splits(1)

// Run training algorithm to build the model
val numIterations = 2000
val trainpredicttime = System.currentTimeMillis
val model = SVMWithSGD.train(training, numIterations)

// Clear the default threshold.
model.clearThreshold()

// Compute raw scores on the test set.
val scoreAndLabels = test.map { point =>
  val score = model.predict(point.features)
  (score, point.label)
}
val trainpredictstoptime = System.currentTimeMillis - trainpredicttime
// Get evaluation metrics.
val metrics = new BinaryClassificationMetrics(scoreAndLabels)
val auROC = metrics.areaUnderROC()

println("Area under ROC = " + auROC)


val totalTime = System.currentTimeMillis - start
println("Elapsed time: %1d ms".format(totalTime))
println("Elapsed Train/Predict time: %1d ms".format(trainpredictstoptime))
